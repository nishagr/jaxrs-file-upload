package com.gs.api;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import javax.ws.rs.ApplicationPath;

import org.glassfish.jersey.media.multipart.MultiPartFeature;
import org.glassfish.jersey.server.ResourceConfig;

import com.gs.models.RequestInfo;
import com.gs.utils.FileAdapter;
import com.gs.utils.FileHandler;
import com.gs.utils.FileRunner;

@ApplicationPath("/api")
public class MainApp extends ResourceConfig {

	private static BlockingQueue<RequestInfo> queue;
	private static BlockingQueue<Runnable> threadQueue;
//	Where to initialize consumer thread
	private Thread readerThread, runThreads;

	public MainApp() {
		packages("com.gs.api");
		register(MultiPartFeature.class);
		queue = new LinkedBlockingQueue<>(1);
		threadQueue = new LinkedBlockingQueue<>(1);
		readerThread = new Thread(() -> {
			try {
				while (true) {
					FileAdapter adapter = new FileAdapter();
					RequestInfo requestInfo = queue.take();
					FileHandler handler = adapter.getFileHandler(requestInfo);
					FileRunner runner = new FileRunner(handler);
					threadQueue.put(runner);
				}

			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		});
		readerThread.start();
		runThreads = new Thread(() -> {
			try {
				while (true) {
					Runnable runnable = threadQueue.peek();
					if (runnable == null) {
						Thread.sleep(100);
						continue;
					}
					Thread thread = new Thread(runnable);
					System.out.println("Alive");
					thread.start();
					while (thread.isAlive())
						;
					System.out.println("Dead");
					threadQueue.poll();
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		});
		runThreads.start();
	}

	public static void addToQueue(RequestInfo requestInfo) {
		try {
			queue.put(requestInfo);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public void finalize() {
		readerThread.interrupt();
		runThreads.interrupt();
	}

}
