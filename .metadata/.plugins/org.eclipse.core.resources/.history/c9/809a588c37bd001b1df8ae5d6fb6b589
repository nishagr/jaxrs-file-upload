package com.gupshup.rest;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;

import javax.annotation.security.RolesAllowed;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.container.ResourceInfo;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.Provider;

import org.glassfish.jersey.internal.util.Base64;

@Provider
public class AuthFilter implements ContainerRequestFilter {

	@Context
	private ResourceInfo resourceInfo;
	private final String AUTH_HEADER = "Authorization";
	private final String AUTH_HEADER_PREFIX = "Basic ";
	private final Response ACCESS_DENIED = Response.status(Response.Status.UNAUTHORIZED)
			.entity("You cannot access this resource").build();
	private final Response ACCESS_FORBIDDEN = Response.status(Response.Status.FORBIDDEN)
			.entity("Access blocked for all users !!").build();

	@Override
	public void filter(ContainerRequestContext requestContext) throws IOException {

		System.out.println(requestContext.getUriInfo().getPath());
		
		Method method = resourceInfo.getResourceMethod();

		List<String> authHeaders = requestContext.getHeaders().get(AUTH_HEADER);
		if (authHeaders == null || authHeaders.isEmpty()) {
			requestContext.abortWith(ACCESS_DENIED);
			return;
		}

		String token = authHeaders.get(0);
		token = token.replace(AUTH_HEADER_PREFIX, "");
		String decodedToken = Base64.decodeAsString(token);
		StringTokenizer tokenizer = new StringTokenizer(decodedToken, ":");
		String username = tokenizer.nextToken();
		String password = tokenizer.nextToken();
		if (method.isAnnotationPresent(RolesAllowed.class)) {
			RolesAllowed rolesAnnotation = method.getAnnotation(RolesAllowed.class);
			Set<String> rolesSet = new HashSet<String>(Arrays.asList(rolesAnnotation.value()));
			if (!isUserAllowed(username, password, rolesSet)) {
				requestContext.abortWith(ACCESS_DENIED);
				return;
			}
		}

	}

	private boolean isUserAllowed(final String username, final String password, final Set<String> rolesSet) {
		boolean isAllowed = false;
		if (username.equals("admin") && password.equals("admin")) {
			String userRole = "admin";
			if (rolesSet.contains(userRole))
				isAllowed = true;
		}
		return isAllowed;
	}

}
